# name:     README.org
# author:   nbehrnd@yahoo.com
# license:  GPL v2, 2022
# date:     <2022-03-17 Thu>
# edit:     <2022-04-27 Wed>

#+OPTIONS: toc:nil

* background / intent

  For a set of molecules [[https://openmolecules.org/datawarrior/index.html][DataWarrior]] e.g., a library of drug-like random
  molecules (Chemistry -> Generate Random Molecules), DataWarrior may generate
  conformers (Chemistry -> Generate Conformers).  Because this simultaneously
  assigns each entry an energy, the conformer of lowest energy per molecule
  probed may be identified.

  For the text file exported by DataWarrior (File -> Save Special -> Textfile)
  after a generation of conformers, this AWK script reports only these
  particular entries.  The assumed layout in the tabulator separated data table
  DataWarrior provides is

  #+begin_src bash :tangle no
$1    the structure ID code (includes the conformation of the molecule)
$2    the molecule ID (one molecule ID may match multiple conformers)
$4    the energy attributed to the specific conformation $1 of $2
  #+end_src

  which is the typical pattern if the permutation of the stereogenic centers is
  disabled, the default suggested by DataWarrior.

* deployment

  For portability across major platforms, this filter is written as [[https://en.wikipedia.org/wiki/AWK][AWK script]].
  Enter the directory containing DataWarrior's text export of conformers and the
  AWK script, which is used in the pattern of

  #+begin_src bash :tangle no
awk -f best_conformer.awk records_in.txt > conformers_out.dwar
  #+end_src

  Though the user has free choice for the names of input and output file, the
  use of =.dwar= as file extension of the new record allows direct reading
  access of this file by DataWarrior.  Alternatively, copy-paste the content
  (Edit -> Paste Special -> New From Data With Header Row) of the new record
  into a pristine session of DataWarrior.  For comparison, this repository
  includes reference data.

* the AWK script

  To further edit the AWK script from Emacs, use =C-c '= to enter a new frame.
  The same command closed this intermediate frame.  To tangle/export the AWK
  script as a separate script, use the chord =C-c C-v t=.
    
  #+begin_src awk :tangle best_conformer.awk
#!/usr/bin/awk -f

# name:    best_conformer.awk
# author:  nbehrnd@yahoo.com
# license: GPL v2, 2022.
# date:    2022-03-17 (YYYY-MM-DD)
# edit:    2022-03-18 (YYYY-MM-DD)

# For each molecule DW suggested, report the conformer of lowest energy.
#
# Export a set of conformers by DataWarrior (hereafter DW) as a text file
# into a directory equally containing a copy of this AWK script.  The
# assumed layout of the tabulator separated data table written by DW is
#
# $1    the structure ID code (includes the conformation of the molecule)
# $2    the molecule ID (one molecule ID may match multiple conformers)
# $4    the energy attributed to the specific conformation $1 of $2
#
# i.e, the typical pattern if permutation of the stereogenic centers is
# disabled (the default suggested by DataWarrior).
#
# The script is to be used e.g., in the pattern of
#
# awk -f best_conformer.awk records_in.txt > conformers_out.dwar
#
# With file extension .dwar, the new record may be accessed directly by
# DataWarrior.  Alternatively, copy-paste the content (Edit -> Paste
# Special -> New From Data With Header Row) of the new record into a
# pristine session of DataWarrior.

BEGIN {
    FS = "\t";
    array[placeholder] = "dummy";
}

{if (NR == 1){
    print;
    }

if (NR >= 2) {
    key = $2;
    energy = $4;

    if (array[key] not in array) {array[key] = $0; counter++;} else {
        existing_array_entry = array[key];

        split(existing_array_entry, assistant_array);
        existing_array_energy = assistant_array[4];

        if (energy < existing_array_energy) {array[key] = $0}
        };
    }
}

END {
    delete array[placeholder];
    for (i = 1; i <= counter; i++){
        print array[i]
        };
    exit;
}
  #+end_src

* test data

  Folder =test_data= demonstrate the use of this filter with DataWarrior
  (version 5.5.0) for Linux in Linux Debian 12/bookworm (branch testing)
  including the development updates by <2022-03-14 Mon>.  AWK as GNU Awk
  (version 5.1.0) was used to run the script.

  Departing from a small library of 10 drug-like molecules suggested by DW
  (=10mol.dwar=) and their subsequently generated conformers
  (=10mol_conf.dwar=), the intermediate text file (=10mol_conf.txt=) was
  processed by

  #+begin_src bash :tangle no
awk -f best_conformer.awk 10mol_conf.txt > conformers_out.dwar
  #+end_src

* content

  #+begin_src bash :exports both code results  :results replace code
tree -L 2
  #+end_src

  #+RESULTS:
  #+begin_src bash
  .
  ├── best_conformer.awk
  ├── LICENSE
  ├── README.org
  └── test_data
      ├── 10mol_conf.dwar
      ├── 10mol_conf.txt
      ├── 10mol.dwar
      └── conformers_out.dwar

  1 directory, 7 files
  #+end_src
